#include <bits/stdc++.h>
using namespace std;
long long gcd(long long a, long long b)
{
    if (b == 0)
        return a;
    return gcd(b, a % b);
}
long long findlcm(long long arr[], int n)
{
    // Initialize result
    long long ans = arr[0];

    // ans contains LCM of arr[0], ..arr[i]
    // after i'th iteration,
    for (int i = 1; i < n; i++)
        ans = arr[i]  / gcd(arr[i], ans)* ans;

    return ans;
}

int main () {
    int n;
    cin >> n;
    int a[n+1];
    for (int i = 0; i < n; i++) {
        int b;
        cin >> b;
        a[b] = i+1;
    }
    long long b[n+1] = {0}, e[n+1] = {0}, e1[n+1] = {0};
    vector<int>v1;
    for (int i = 1; i <= n; i++)
    if (e[i] == 0) {
        vector<int>v;
        int c = a[i], t = 0;
        v.push_back(i);
        while (c != i) {
            c = a[c];
            v.push_back(c);
            t++;
        }
        t++;
        for (int j = 0; j < v.size(); j++) {
            if (e1[t] == 0) {
                v1.push_back(t);
                e1[t] = 1;
            }
            e[v[j]] = 1;
        }

    }
    long long c[v1.size()];
    for (int i = 0; i < v1.size(); i++)
    c[i] = v1[i];
    long long ans = findlcm(c, v1.size());
    cout << ans;
    return 0;
}
